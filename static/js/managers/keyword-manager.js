// Enhanced Log ÂàÜÊûêÂπ≥Âè∞ v6 - ÈóúÈçµÂ≠óÁÆ°ÁêÜÂô®
// static/js/managers/keyword-manager.js

window.keywordManager = {
    init: function() {
        console.log('üè∑Ô∏è ÂàùÂßãÂåñÈóúÈçµÂ≠óÁÆ°ÁêÜÂô®');
        
        // Ë®≠ÁΩÆÊãñÊîæ‰∏äÂÇ≥
        this.setupDropZone();
        
        // Ë®≠ÁΩÆ‰∫ã‰ª∂Áõ£ËÅΩÂô®
        this.setupEventListeners();
    },
    
    // ËºâÂÖ•ÈóúÈçµÂ≠ó
    loadKeywords: function() {
        $.get(appConfig.api.keywords)
            .done((data) => {
                console.log('üìã ËºâÂÖ•ÈóúÈçµÂ≠ó:', data);
                if (Object.keys(data).length > 0) {
                    appConfig.state.keywords = data;
                    this.updateKeywordPreview();
                }
            })
            .fail(() => {
                console.log('‚ùå ËºâÂÖ•ÈóúÈçµÂ≠óÂ§±Êïó');
                utils.showAlert('‚ùå ËºâÂÖ•ÈóúÈçµÂ≠óÂ§±Êïó', 'danger');
            });
    },
    
    // Ë®≠ÁΩÆÊãñÊîæÂçÄÂüü
    setupDropZone: function() {
        const uploadZone = document.getElementById('upload-zone');
        if (!uploadZone) return;
        
        // ÊãñÊõ≥ÈÄ≤ÂÖ•
        uploadZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            $(uploadZone).addClass('dragover');
        });
        
        // ÊãñÊõ≥Èõ¢Èñã
        uploadZone.addEventListener('dragleave', (e) => {
            e.preventDefault();
            $(uploadZone).removeClass('dragover');
        });
        
        // ÊãñÊõ≥Êîæ‰∏ã
        uploadZone.addEventListener('drop', (e) => {
            e.preventDefault();
            $(uploadZone).removeClass('dragover');
            
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                this.uploadKeywords(files[0]);
            }
        });
        
        // ÈªûÊìä‰∏äÂÇ≥
        uploadZone.addEventListener('click', () => {
            $('#keyword-file').click();
        });
    },
    
    // Ë®≠ÁΩÆ‰∫ã‰ª∂Áõ£ËÅΩÂô®
    setupEventListeners: function() {
        // Ê™îÊ°àÈÅ∏Êìá
        $('#keyword-file').on('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                console.log('üìÅ ÈÅ∏ÊìáÊ™îÊ°à:', file.name);
                this.uploadKeywords(file);
            }
        });
    },
    
    // ‰∏äÂÇ≥ÈóúÈçµÂ≠ó
    uploadKeywords: function(file) {
        if (!file) {
            console.log('‚ùå Ê≤íÊúâÈÅ∏ÊìáÊ™îÊ°à');
            return;
        }
        
        // Ê™¢Êü•Ê™îÊ°àÈ°ûÂûã
        if (!file.name.endsWith('.csv') && !file.name.endsWith('.txt')) {
            utils.showAlert('‚ùå Ë´ã‰∏äÂÇ≥ CSV Êàñ TXT Ê†ºÂºèÁöÑÊ™îÊ°à', 'danger');
            return;
        }
        
        console.log('üì§ ‰∏äÂÇ≥ÈóúÈçµÂ≠óÊ™îÊ°à:', file.name);
        
        const formData = new FormData();
        formData.append('file', file);
        
        utils.showAlert('üì§ ‰∏äÂÇ≥‰∏≠...', 'info', 2000);
        
        $.ajax({
            url: '/upload_keywords',  // ‰øÆÊ≠£ÁÇ∫Ê≠£Á¢∫ÁöÑË∑ØÂæë
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: (response) => {
                console.log('üìã ‰∏äÂÇ≥ÂõûÊáâ:', response);
                if (response.success) {
                    appConfig.state.keywords = response.keywords;
                    this.updateKeywordPreview();
                    utils.showAlert(`‚úÖ ${response.message}`, 'success');
                    utils.playNotificationSound('success');
                    
                    // Êõ¥Êñ∞ÂàÜÊûêÊåâÈàïÁãÄÊÖã
                    this.updateAnalysisButtons();
                } else {
                    utils.showAlert(`‚ùå ${response.message || '‰∏äÂÇ≥Â§±Êïó'}`, 'danger');
                }
            },
            error: (xhr, status, error) => {
                console.error('‚ùå ‰∏äÂÇ≥Â§±Êïó:', status, error);
                let errorMessage = '‰∏äÂÇ≥Â§±Êïó';
                
                if (xhr.responseJSON && xhr.responseJSON.message) {
                    errorMessage = xhr.responseJSON.message;
                } else if (xhr.status === 404) {
                    errorMessage = '‰∏äÂÇ≥Êé•Âè£‰∏çÂ≠òÂú®ÔºåË´ãÊ™¢Êü•ÂæåÁ´ØÊúçÂãô';
                } else if (xhr.status === 500) {
                    errorMessage = '‰º∫ÊúçÂô®ÈåØË™§ÔºåË´ãÁ®çÂæåÂÜçË©¶';
                }
                
                utils.showAlert(`‚ùå ${errorMessage}`, 'danger');
            }
        });
    },
    
    // Êõ¥Êñ∞ÈóúÈçµÂ≠óÈ†êË¶Ω
    updateKeywordPreview: function() {
        const preview = $('#keyword-preview');
        const modules = $('#keyword-modules');
        
        if (Object.keys(appConfig.state.keywords).length === 0) {
            preview.hide();
            return;
        }
        
        modules.empty();
        
        Object.entries(appConfig.state.keywords).forEach(([module, keywordList]) => {
            const moduleElement = $(`
                <div class="keyword-module animate__animated animate__fadeIn" data-module="${module}">
                    <div class="d-flex justify-content-between align-items-center p-3 bg-light rounded mb-2">
                        <div>
                            <h6 class="mb-1">
                                <i class="fas fa-tag me-2 text-primary"></i>${module}
                            </h6>
                            <div class="keyword-list">
                                ${keywordList.map(k => `<span class="badge bg-secondary me-1">${k}</span>`).join('')}
                            </div>
                            <small class="text-muted">ÂÖ± ${keywordList.length} ÂÄãÈóúÈçµÂ≠ó</small>
                        </div>
                        <button class="btn btn-outline-danger btn-sm" onclick="keywordManager.deleteKeywordModule('${module}')" title="Âà™Èô§Ê≠§Ê®°ÁµÑ">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `);
            modules.append(moduleElement);
        });
        
        preview.show();
        
        // Êõ¥Êñ∞Áµ±Ë®à
        const totalModules = Object.keys(appConfig.state.keywords).length;
        const totalKeywords = Object.values(appConfig.state.keywords).reduce((sum, list) => sum + list.length, 0);
        
        modules.append(`
            <div class="mt-3 p-3 bg-info bg-opacity-10 rounded">
                <i class="fas fa-info-circle me-2"></i>
                Á∏ΩË®à: ${totalModules} ÂÄãÊ®°ÁµÑ, ${totalKeywords} ÂÄãÈóúÈçµÂ≠ó
            </div>
        `);
        
        console.log('üìã ÈóúÈçµÂ≠óÈ†êË¶ΩÂ∑≤Êõ¥Êñ∞');
    },
    
    // Âà™Èô§ÈóúÈçµÂ≠óÊ®°ÁµÑ
    deleteKeywordModule: function(module) {
        if (!confirm(`Á¢∫ÂÆöË¶ÅÂà™Èô§Ê®°ÁµÑ "${module}" ÂóéÔºü`)) {
            return;
        }
        
        $.ajax({
            url: `${appConfig.api.deleteKeyword}${encodeURIComponent(module)}`,
            type: 'DELETE',
            success: (response) => {
                if (response.success) {
                    delete appConfig.state.keywords[module];
                    this.updateKeywordPreview();
                    utils.showAlert(`‚úÖ Â∑≤Âà™Èô§Ê®°ÁµÑ: ${module}`, 'success');
                    utils.playNotificationSound('success');
                    
                    // Êõ¥Êñ∞ÂàÜÊûêÊåâÈàïÁãÄÊÖã
                    this.updateAnalysisButtons();
                } else {
                    utils.showAlert(`‚ùå ${response.message}`, 'danger');
                }
            },
            error: () => {
                utils.showAlert('‚ùå Âà™Èô§Â§±Êïó', 'danger');
            }
        });
    },
    
    // Âæ©ÂéüÊâÄÊúâÈóúÈçµÂ≠ó
    restoreKeywords: function() {
        if (!confirm('Á¢∫ÂÆöË¶ÅÂæ©ÂéüÊâÄÊúâÈóúÈçµÂ≠óÊ®°ÁµÑÂóéÔºü')) {
            return;
        }
        
        $.ajax({
            url: appConfig.api.restoreKeywords,
            type: 'POST',
            success: (response) => {
                if (response.success) {
                    appConfig.state.keywords = response.keywords;
                    this.updateKeywordPreview();
                    utils.showAlert(`‚úÖ ${response.message}`, 'success');
                    utils.playNotificationSound('success');
                    
                    // Êõ¥Êñ∞ÂàÜÊûêÊåâÈàïÁãÄÊÖã
                    this.updateAnalysisButtons();
                } else {
                    utils.showAlert(`‚ùå ${response.message}`, 'danger');
                }
            },
            error: () => {
                utils.showAlert('‚ùå Âæ©ÂéüÂ§±Êïó', 'danger');
            }
        });
    },
    
    // Êõ¥Êñ∞ÂàÜÊûêÊåâÈàïÁãÄÊÖã
    updateAnalysisButtons: function() {
        const hasKeywords = Object.keys(appConfig.state.keywords).length > 0;
        const hasFiles = appConfig.state.selectedFiles.length > 0;
        
        // Êõ¥Êñ∞ÊµÅÂºèÂàÜÊûêÊåâÈàï
        const analyzeBtn = $('#analyze-btn');
        if (hasKeywords && hasFiles) {
            analyzeBtn.prop('disabled', false);
        } else {
            analyzeBtn.prop('disabled', true);
        }
        
        // Êõ¥Êñ∞Âø´ÈÄüÂàÜÊûêÊåâÈàï
        quickAnalysis.updateAnalysisButton();
    },
    
    // ÂåØÂá∫ÈóúÈçµÂ≠ó
    exportKeywords: function() {
        if (Object.keys(appConfig.state.keywords).length === 0) {
            utils.showAlert('‚ö†Ô∏è Ê≤íÊúâÈóúÈçµÂ≠óÂèØ‰ª•ÂåØÂá∫', 'warning');
            return;
        }
        
        // ËΩâÊèõÁÇ∫ CSV Ê†ºÂºè
        let csv = 'Module,Keyword list\n';
        
        Object.entries(appConfig.state.keywords).forEach(([module, keywordList]) => {
            csv += `"${module}","${keywordList.join(',')}"\n`;
        });
        
        // ‰∏ãËºâ CSV
        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `keywords_${new Date().getTime()}.csv`;
        a.click();
        
        URL.revokeObjectURL(url);
        utils.showAlert('‚úÖ ÈóúÈçµÂ≠óÂ∑≤ÂåØÂá∫', 'success');
    },
    
    // Âø´ÈÄüÊ∑ªÂä†ÈóúÈçµÂ≠ó
    quickAddKeyword: function() {
        const module = prompt('Ë´ãËº∏ÂÖ•Ê®°ÁµÑÂêçÁ®±:');
        if (!module) return;
        
        const keywords = prompt('Ë´ãËº∏ÂÖ•ÈóúÈçµÂ≠óÔºàÁî®ÈÄóËôüÂàÜÈöîÔºâ:');
        if (!keywords) return;
        
        const keywordList = keywords.split(',').map(k => k.trim()).filter(k => k);
        
        if (keywordList.length === 0) {
            utils.showAlert('‚ö†Ô∏è Ë´ãËº∏ÂÖ•ÊúâÊïàÁöÑÈóúÈçµÂ≠ó', 'warning');
            return;
        }
        
        // Ê∑ªÂä†Âà∞Êú¨Âú∞ÈóúÈçµÂ≠ó
        if (!appConfig.state.keywords[module]) {
            appConfig.state.keywords[module] = [];
        }
        
        appConfig.state.keywords[module] = appConfig.state.keywords[module].concat(keywordList);
        
        // Êõ¥Êñ∞È†êË¶Ω
        this.updateKeywordPreview();
        this.updateAnalysisButtons();
        
        utils.showAlert(`‚úÖ Â∑≤Ê∑ªÂä†ÈóúÈçµÂ≠óÂà∞Ê®°ÁµÑ: ${module}`, 'success');
    },
    
    // Ê∏ÖÁ©∫ÊâÄÊúâÈóúÈçµÂ≠ó
    clearAllKeywords: function() {
        if (Object.keys(appConfig.state.keywords).length === 0) {
            utils.showAlert('‚ö†Ô∏è Ê≤íÊúâÈóúÈçµÂ≠óÈúÄË¶ÅÊ∏ÖÁ©∫', 'warning');
            return;
        }
        
        if (!confirm('Á¢∫ÂÆöË¶ÅÊ∏ÖÁ©∫ÊâÄÊúâÈóúÈçµÂ≠óÂóéÔºüÊ≠§Êìç‰ΩúÁÑ°Ê≥ïÂæ©Âéü„ÄÇ')) {
            return;
        }
        
        appConfig.state.keywords = {};
        this.updateKeywordPreview();
        this.updateAnalysisButtons();
        
        utils.showAlert('‚úÖ Â∑≤Ê∏ÖÁ©∫ÊâÄÊúâÈóúÈçµÂ≠ó', 'success');
    },
    
    // È©óË≠â CSV Ê†ºÂºè
    validateCSV: function(content) {
        try {
            const lines = content.trim().split('\n');
            if (lines.length < 2) {
                return { valid: false, error: 'CSV Ê™îÊ°àËá≥Â∞ëÈúÄË¶ÅÊ®ôÈ°åË°åÂíå‰∏ÄË°åË≥áÊñô' };
            }
            
            const header = lines[0].toLowerCase();
            if (!header.includes('module') || !header.includes('keyword')) {
                return { valid: false, error: 'CSV Ê®ôÈ°åÂøÖÈ†àÂåÖÂê´ Module Âíå Keyword Ê¨Ñ‰Ωç' };
            }
            
            return { valid: true };
        } catch (e) {
            return { valid: false, error: 'ÁÑ°ÊïàÁöÑ CSV Ê†ºÂºè' };
        }
    }
};